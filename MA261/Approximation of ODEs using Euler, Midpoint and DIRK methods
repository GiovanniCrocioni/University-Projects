{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Student ID:** 2012149 and 1904805\n",
    "\n",
    "---\n",
    "## Assignment 3 Part II \n",
    "\n",
    "We begin by importing the libraries we will need to complete the assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import array\n",
    "from numpy.linalg import solve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problem Set-Up**\n",
    "\n",
    "For question 2.1 and 2.2, we will test our implementation on both the *Backward Euler* and the *Midpoint* method using the 2x2 ODE: \n",
    "\n",
    "$$y'(t)=F(y(t)) \\;\\;\\;\\;\\;\\; y(0)=y_0 $$ with :\n",
    "$$ F(y_1,y_2) = \\left(\\begin{array}{cc} y_2 \\\\[1ex] y_2(\\lambda-2y_1) \\end{array}\\right) $$\n",
    "\n",
    "Given $\\lambda=1$ and initial conditions $y_0=(2, -2)^T$, this has the exact solution:\n",
    "\n",
    "$$ Y(t) = \\left(\\begin{array}{cc}\n",
    "   \\frac{2e^t}{2e^t-1} \\\\[2ex]\n",
    "    \\frac{-2e^{t}}{4e^{2t}-4e^t+1}\n",
    " \\end{array}\\right) $$\n",
    " \n",
    " We will solve this on the interval $[0,T]$, where in this particular exercise $T=1$.\n",
    " \n",
    " Coding wise, we begin by defining the function f, its jacobian Df, and the exact solution Y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "T = 1\n",
    "\n",
    "def f(t,y): # Function f \n",
    "    return array([y[1], y[1]*(1-2*y[0])])\n",
    "\n",
    "def Df(t,y): # Jacobian of the function f \n",
    "    return array([[0,1],[2*y[1],1-2*y[0]]])\n",
    "\n",
    "def Y(t):    # Exact solution\n",
    "    return np.array([2*np.exp(t)/(2*np.exp(t)-1),-2*np.exp(t)/(4*np.exp(2*t)-4*np.exp(t)+1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now import the five methods used in quiz 1 and 2, which are *npPrint*, *evolve*, *computeEocs*, *newton*, and *backwardEuler*. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The defintions from quiz 3\n",
    "\n",
    "def newton(F,DF,x0,eps,K):\n",
    "    k  = 0\n",
    "    x  = x0.copy().astype(np.float64)  # note: with x=x0 changes to x also changes to x0 with numpy arrays\n",
    "    Fx = F(x)\n",
    "    while Fx.dot(Fx) > eps*eps and k<K:\n",
    "        x[:] -= solve(DF(x), Fx)  # don't construct a new vector in each step - they could be large\n",
    "        Fx = F(x)\n",
    "        k += 1\n",
    "    return x,k\n",
    "\n",
    "def dirk(f,Df, t0,y0, h, alpha,beta,gamma):\n",
    "    m = len(y0)\n",
    "    s = len(gamma)\n",
    "    y = y0.copy().astype(float)\n",
    "    k = np.zeros([s,m])\n",
    "    for i in range(s):\n",
    "        ti = t0+alpha[i]*h\n",
    "        yi = y0.copy().astype(float)\n",
    "        for j in range(i):\n",
    "            yi += h*beta[i,j]*k[j]\n",
    "        k[i,:] = f(ti,yi);        \n",
    "        if beta[i,i] > 0:\n",
    "            k[i,:],K = newton (lambda k: k-f(ti,yi+h*beta[i,i]*k),\n",
    "                             lambda k: np.eye(m)-h*beta[i,i]*Df(ti,yi+h*beta[i,i]*k),\n",
    "                             k[i,:], 1e-15, 1000)\n",
    "            assert K < 1000        \n",
    "        y += h*gamma[i]*k[i,:]\n",
    "    return y\n",
    "        \n",
    "def backwardEuler( f,Df, t0,y0, h):\n",
    "    # not good style but reduces polution of the global namespace when running the tests\n",
    "    from numpy import eye\n",
    "    F =  lambda delta: delta-f(t0+h,y0+h*delta)\n",
    "    DF = lambda delta: eye(len(y0))-h*Df(t0+h,y0+h*delta)\n",
    "    delta,_ = newton(F,DF,f(t0+h,y0),h*h*1e-5,1000)\n",
    "    return y0+h*delta\n",
    "\n",
    "def evolve(phi,f,Df,t0,y0,T,N):\n",
    "    h = T/N\n",
    "    y = np.zeros([N+1, len(y0)])\n",
    "    y[0] = y0\n",
    "    t = 0\n",
    "    for i in range(N):\n",
    "        y[i+1] = phi(f,Df,t,y[i],h)\n",
    "        t = t+h\n",
    "    return y\n",
    "\n",
    "def computeEocs( herr ): \n",
    "    eocs = np.zeros(len(herr)-1)\n",
    "    for i in range(len(eocs)):\n",
    "        eocs [i] = np.log(herr[i+1][1]/herr[i][1])/np.log(herr[i+1][0]/herr[i][0])\n",
    "    return eocs\n",
    "\n",
    "def npPrint(a, f={'float_kind':lambda x: \"%.5e\" % x}): \n",
    "   print( np.array2string(a, formatter=f) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to compute errors at the final time t and the EOC for the sequence of time steps given by $ h_{i}= \\frac{1}{N_{i}} $ with $ N_{i} = N_{0} * 2^{i} $ for $i \\in {(0,...,10)}$ and $N_{0} = 20$ . \n",
    "\n",
    "To avoid code duplication, we implement a function *experiment* to perform the computation of the errors for the given time steps and the eocs. The method returns an array of length 11, with each entry of the form ‘[h,error,eoc]’."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def experiment(stepper): \n",
    "    M =11\n",
    "    herr = np.zeros((M,3)) \n",
    "    for m in range(M):\n",
    "        N = 20*2**m\n",
    "        h = 1/N\n",
    "        y = evolve(stepper, f,Df, 0,Y(0),T, N)\n",
    "        herr[m][0] = h\n",
    "        herr[m][1]= np.linalg.norm(y[-1]-Y(1))\n",
    "    for i in range(10):\n",
    "        herr[i+1][2]= computeEocs(herr)[i]\n",
    "    return herr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2.1\n",
    "\n",
    "\n",
    "We test our simulation using the Backward Euler Method. The Backward Euler Method has the following butcher table: $$ \\begin{array}{l|l} 1&1 \\\\ \\hline & 1 \\end{array} $$\n",
    "\n",
    "\n",
    "\n",
    "The table below has three columns, one for the time step h, one for the approximation error, and the final column showing the experimental order of convergence. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "aCN = np.array([1])\n",
    "bCN = np.array([[1]])\n",
    "gCN = np.array([1])\n",
    "\n",
    "stepper = lambda f,Df,t0,y0,h: dirk(f,Df,t0,y0,h,aCN,bCN,gCN)\n",
    "resBE = experiment(stepper)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "We test our simulation using the Midpoint Method. The Midpoint Method has the following butcher table: $$ \\begin{array}{l|l} 1/2&1/2 \\\\ \\hline & 1 \\end{array} $$ \n",
    "\n",
    "\n",
    "\n",
    "The table below has three columns, one for the time step h, one for the approximation error, and the final column showing the experimental order of convergence. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "aCN = np.array([1/2])\n",
    "bCN = np.array([[1/2]])\n",
    "gCN = np.array([1])\n",
    "\n",
    "stepper = lambda f,Df,t0,y0,h: dirk(f,Df,t0,y0,h,aCN,bCN,gCN)\n",
    "resMP = experiment(stepper)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "We test our simulation using the third order Dirk method. This method has the following butcher table: $$ \\begin{array}\n",
    "{c|cccc}\n",
    "\\frac{1}{3} &\\frac{1}{3} &0 \\\\\n",
    "1& 1& 0& \\\\\n",
    "\\hline\n",
    "& \\frac{3}{4} &\\frac{1}{4}\n",
    "\\end{array} $$\n",
    "\n",
    "\n",
    "\n",
    "The table below has three columns, one for the time step h, one for the approximation error, and the final column showing the experimental order of convergence. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "aCN = np.array([1/3,1])\n",
    "bCN = np.array([[1/3,0],[1,0]])\n",
    "gCN = np.array([3/4,1/4])\n",
    "\n",
    "stepper = lambda f,Df,t0,y0,h: dirk(f,Df,t0,y0,h,aCN,bCN,gCN)\n",
    "resDI = experiment(stepper)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.00000000e-02 3.47143604e-02 0.00000000e+00]\n",
      " [2.50000000e-02 1.74956360e-02 9.88537478e-01]\n",
      " [1.25000000e-02 8.78341268e-03 9.94141621e-01]\n",
      " [6.25000000e-03 4.40073792e-03 9.97036132e-01]\n",
      " [3.12500000e-03 2.20264422e-03 9.98508971e-01]\n",
      " [1.56250000e-03 1.10189315e-03 9.99252154e-01]\n",
      " [7.81250000e-04 5.51089614e-04 9.99625487e-01]\n",
      " [3.90625000e-04 2.75580603e-04 9.99812595e-01]\n",
      " [1.95312500e-04 1.37799255e-04 9.99906260e-01]\n",
      " [9.76562500e-05 6.89018662e-05 9.99953121e-01]\n",
      " [4.88281250e-05 3.44514929e-05 9.99976558e-01]]\n",
      "[[5.00000000e-02 5.73194188e-04 0.00000000e+00]\n",
      " [2.50000000e-02 1.43192204e-04 2.00107103e+00]\n",
      " [1.25000000e-02 3.57914145e-05 2.00026749e+00]\n",
      " [6.25000000e-03 8.94743899e-06 2.00006685e+00]\n",
      " [3.12500000e-03 2.23683383e-06 2.00001671e+00]\n",
      " [1.56250000e-03 5.59206838e-07 2.00000418e+00]\n",
      " [7.81250000e-04 1.39801609e-07 2.00000104e+00]\n",
      " [3.90625000e-04 3.49503962e-08 2.00000025e+00]\n",
      " [1.95312500e-04 8.73760128e-09 1.99999963e+00]\n",
      " [9.76562500e-05 2.18439828e-09 2.00000135e+00]\n",
      " [4.88281250e-05 5.46095840e-10 2.00000985e+00]]\n",
      "[[5.00000000e-02 1.23851050e-05 0.00000000e+00]\n",
      " [2.50000000e-02 1.51854798e-06 3.02784171e+00]\n",
      " [1.25000000e-02 1.87914970e-07 3.01454058e+00]\n",
      " [6.25000000e-03 2.33689569e-08 3.00741476e+00]\n",
      " [3.12500000e-03 2.91355221e-09 3.00374227e+00]\n",
      " [1.56250000e-03 3.63721267e-10 3.00187398e+00]\n",
      " [7.81250000e-04 4.54370011e-11 3.00089376e+00]\n",
      " [3.90625000e-04 5.68284803e-12 2.99918158e+00]\n",
      " [1.95312500e-04 7.05578833e-13 3.00973495e+00]\n",
      " [9.76562500e-05 8.68229188e-14 3.02265945e+00]\n",
      " [4.88281250e-05 7.10737865e-15 3.61068646e+00]]\n",
      "[[5.00000000e-02 3.47143604e-02 0.00000000e+00 5.00000000e-02\n",
      "  5.73194188e-04 0.00000000e+00 5.00000000e-02 1.23851050e-05\n",
      "  0.00000000e+00]\n",
      " [2.50000000e-02 1.74956360e-02 9.88537478e-01 2.50000000e-02\n",
      "  1.43192204e-04 2.00107103e+00 2.50000000e-02 1.51854798e-06\n",
      "  3.02784171e+00]\n",
      " [1.25000000e-02 8.78341268e-03 9.94141621e-01 1.25000000e-02\n",
      "  3.57914145e-05 2.00026749e+00 1.25000000e-02 1.87914970e-07\n",
      "  3.01454058e+00]\n",
      " [6.25000000e-03 4.40073792e-03 9.97036132e-01 6.25000000e-03\n",
      "  8.94743899e-06 2.00006685e+00 6.25000000e-03 2.33689569e-08\n",
      "  3.00741476e+00]\n",
      " [3.12500000e-03 2.20264422e-03 9.98508971e-01 3.12500000e-03\n",
      "  2.23683383e-06 2.00001671e+00 3.12500000e-03 2.91355221e-09\n",
      "  3.00374227e+00]\n",
      " [1.56250000e-03 1.10189315e-03 9.99252154e-01 1.56250000e-03\n",
      "  5.59206838e-07 2.00000418e+00 1.56250000e-03 3.63721267e-10\n",
      "  3.00187398e+00]\n",
      " [7.81250000e-04 5.51089614e-04 9.99625487e-01 7.81250000e-04\n",
      "  1.39801609e-07 2.00000104e+00 7.81250000e-04 4.54370011e-11\n",
      "  3.00089376e+00]\n",
      " [3.90625000e-04 2.75580603e-04 9.99812595e-01 3.90625000e-04\n",
      "  3.49503962e-08 2.00000025e+00 3.90625000e-04 5.68284803e-12\n",
      "  2.99918158e+00]\n",
      " [1.95312500e-04 1.37799255e-04 9.99906260e-01 1.95312500e-04\n",
      "  8.73760128e-09 1.99999963e+00 1.95312500e-04 7.05578833e-13\n",
      "  3.00973495e+00]\n",
      " [9.76562500e-05 6.89018662e-05 9.99953121e-01 9.76562500e-05\n",
      "  2.18439828e-09 2.00000135e+00 9.76562500e-05 8.68229188e-14\n",
      "  3.02265945e+00]\n",
      " [4.88281250e-05 3.44514929e-05 9.99976558e-01 4.88281250e-05\n",
      "  5.46095840e-10 2.00000985e+00 4.88281250e-05 7.10737865e-15\n",
      "  3.61068646e+00]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >h</th>        <th class=\"col_heading level0 col1\" >BE-error</th>        <th class=\"col_heading level0 col2\" >BE-eoc</th>        <th class=\"col_heading level0 col3\" >Midpoint-error</th>        <th class=\"col_heading level0 col4\" >Midpoint-eoc</th>        <th class=\"col_heading level0 col5\" >Dirk-error</th>        <th class=\"col_heading level0 col6\" >Dirk-eoc</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col0\" class=\"data row0 col0\" >5.0000e-02</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col1\" class=\"data row0 col1\" >3.471436e-02</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col2\" class=\"data row0 col2\" >0.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col3\" class=\"data row0 col3\" >5.731942e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col4\" class=\"data row0 col4\" >0.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col5\" class=\"data row0 col5\" >1.238511e-05</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row0_col6\" class=\"data row0 col6\" >0.000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col0\" class=\"data row1 col0\" >2.5000e-02</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col1\" class=\"data row1 col1\" >1.749564e-02</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col2\" class=\"data row1 col2\" >0.989</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col3\" class=\"data row1 col3\" >1.431922e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col4\" class=\"data row1 col4\" >2.001</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col5\" class=\"data row1 col5\" >1.518548e-06</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row1_col6\" class=\"data row1 col6\" >3.028</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col0\" class=\"data row2 col0\" >1.2500e-02</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col1\" class=\"data row2 col1\" >8.783413e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col2\" class=\"data row2 col2\" >0.994</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col3\" class=\"data row2 col3\" >3.579141e-05</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col4\" class=\"data row2 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col5\" class=\"data row2 col5\" >1.879150e-07</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row2_col6\" class=\"data row2 col6\" >3.015</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col0\" class=\"data row3 col0\" >6.2500e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col1\" class=\"data row3 col1\" >4.400738e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col2\" class=\"data row3 col2\" >0.997</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col3\" class=\"data row3 col3\" >8.947439e-06</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col4\" class=\"data row3 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col5\" class=\"data row3 col5\" >2.336896e-08</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row3_col6\" class=\"data row3 col6\" >3.007</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col0\" class=\"data row4 col0\" >3.1250e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col1\" class=\"data row4 col1\" >2.202644e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col2\" class=\"data row4 col2\" >0.999</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col3\" class=\"data row4 col3\" >2.236834e-06</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col4\" class=\"data row4 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col5\" class=\"data row4 col5\" >2.913552e-09</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row4_col6\" class=\"data row4 col6\" >3.004</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col0\" class=\"data row5 col0\" >1.5625e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col1\" class=\"data row5 col1\" >1.101893e-03</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col2\" class=\"data row5 col2\" >0.999</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col3\" class=\"data row5 col3\" >5.592068e-07</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col4\" class=\"data row5 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col5\" class=\"data row5 col5\" >3.637213e-10</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row5_col6\" class=\"data row5 col6\" >3.002</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col0\" class=\"data row6 col0\" >7.8125e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col1\" class=\"data row6 col1\" >5.510896e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col2\" class=\"data row6 col2\" >1.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col3\" class=\"data row6 col3\" >1.398016e-07</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col4\" class=\"data row6 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col5\" class=\"data row6 col5\" >4.543700e-11</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row6_col6\" class=\"data row6 col6\" >3.001</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col0\" class=\"data row7 col0\" >3.9063e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col1\" class=\"data row7 col1\" >2.755806e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col2\" class=\"data row7 col2\" >1.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col3\" class=\"data row7 col3\" >3.495040e-08</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col4\" class=\"data row7 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col5\" class=\"data row7 col5\" >5.682848e-12</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row7_col6\" class=\"data row7 col6\" >2.999</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col0\" class=\"data row8 col0\" >1.9531e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col1\" class=\"data row8 col1\" >1.377993e-04</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col2\" class=\"data row8 col2\" >1.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col3\" class=\"data row8 col3\" >8.737601e-09</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col4\" class=\"data row8 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col5\" class=\"data row8 col5\" >7.055788e-13</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row8_col6\" class=\"data row8 col6\" >3.010</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col0\" class=\"data row9 col0\" >9.7656e-05</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col1\" class=\"data row9 col1\" >6.890187e-05</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col2\" class=\"data row9 col2\" >1.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col3\" class=\"data row9 col3\" >2.184398e-09</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col4\" class=\"data row9 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col5\" class=\"data row9 col5\" >8.682292e-14</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row9_col6\" class=\"data row9 col6\" >3.023</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col0\" class=\"data row10 col0\" >4.8828e-05</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col1\" class=\"data row10 col1\" >3.445149e-05</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col2\" class=\"data row10 col2\" >1.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col3\" class=\"data row10 col3\" >5.460958e-10</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col4\" class=\"data row10 col4\" >2.000</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col5\" class=\"data row10 col5\" >7.107379e-15</td>\n",
       "                        <td id=\"T_c54c5eef_9c84_11ec_923b_7cb0c2e375c3row10_col6\" class=\"data row10 col6\" >3.611</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x1d877e573d0>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = np.hstack([resBE,resMP,resDI])\n",
    "print(resBE)\n",
    "print(resMP)\n",
    "print(resDI)\n",
    "print(res)\n",
    "import pandas as pd\n",
    "# columns of table\n",
    "columns=['h', 'BE-error', 'BE-eoc', 'Midpoint-error','Midpoint-eoc','Dirk-error','Dirk-eoc']\n",
    "# values in table\n",
    "keys = {columns[0]: resBE[:,0], columns[1]: resBE[:,1], columns[2]: resBE[:,2],\n",
    "                                columns[3]: resMP[:,1], columns[4]: resMP[:,2],\n",
    "                                columns[5]: resDI[:,1], columns[6]: resDI[:,2]}\n",
    "# generate table\n",
    "table = pd.DataFrame(keys, index=range(res.shape[0]),\n",
    "        columns=columns)\n",
    "# format floating points for each column\n",
    "table = table.style.format({columns[0]:'{:.4e}',\n",
    "                            columns[1]:'{:.6e}', columns[3]:'{:.6e}', columns[5]:'{:.6e}',\n",
    "                            columns[2]:'{:.3f}', columns[4]:'{:.3f}', columns[6]:'{:.3f}' })\n",
    "# print(table.to_latex()) # output result as latex table for inclusion in tex document\n",
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "plt.loglog(res[:,0],res[:,1],'bo-',label=\"Backward Euler\")\n",
    "plt.loglog(res[:,0],res[:,4],'r^-',label=\"Midpoint\")\n",
    "plt.loglog(res[:,0],res[:,7],'g^-',label=\"Dirk\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.title(\"Error vs step size\")\n",
    "plt.xlabel(\"step size h\")\n",
    "plt.ylabel(\"Error at end time\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**What we could do to make better**\n",
    "\n",
    "Add a column comapring backward euler and midpoint with this dirk, with what he had done the last weeks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.special import ellipj\n",
    "def Y(t):\n",
    "    sn ,cn ,dn ,_ = ellipj (t,k*k)\n",
    "    return array ([ sn , cn*dn ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
