{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student ID: 2012149 and 1904805\n",
      "\n",
      "Question 2.1\n",
      "\n",
      "The table below has three columns, one for the time step h, one for the approximation error, and the final \n",
      " column showing the EOCs.\n",
      "\n",
      "       h          Error        EOCS\n",
      "[[5.00000e-02 3.58941e-02 0.00000e+00]\n",
      " [2.50000e-02 1.77895e-02 1.01272e+00]\n",
      " [1.25000e-02 8.85682e-03 1.00617e+00]\n",
      " [6.25000e-03 4.41908e-03 1.00304e+00]\n",
      " [3.12500e-03 2.20723e-03 1.00151e+00]\n",
      " [1.56250e-03 1.10304e-03 1.00075e+00]\n",
      " [7.81250e-04 5.51376e-04 1.00038e+00]\n",
      " [3.90625e-04 2.75652e-04 1.00019e+00]\n",
      " [1.95313e-04 1.37817e-04 1.00009e+00]\n",
      " [9.76563e-05 6.89063e-05 1.00005e+00]\n",
      " [4.88281e-05 3.44526e-05 1.00002e+00]]\n",
      "\n",
      "We notice the EOC tends to 1 as h gets smaller, which implies the forward Euler method converges linearly!\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# The defintions from quiz 1\n",
    "def forwardEuler(f,Df,t0,y0,h): \n",
    "    return y0 + h*f(t0,y0[0],y0[1])\n",
    "\n",
    "def npPrint(a, f={'float_kind':lambda x: \"%.5e\" % x}): \n",
    "   print( np.array2string(a, formatter=f) )\n",
    "    \n",
    "def Df(t,y): # Jacobian of right hand side (not needed here)\n",
    "    return array([ 2*(c-y[0]) ])\n",
    "    \n",
    "def evolve(phi,f,Df,t0,y0,T,N):\n",
    "    h = T/N\n",
    "    y = np.zeros([N+1, len(y0)])\n",
    "    y[0] = y0\n",
    "    t = 0\n",
    "    for i in range(N):\n",
    "        y[i+1] = phi(f,Df,t,y[i],h)\n",
    "        t = t+h\n",
    "    return y\n",
    "def f(t,y1,y2,l=1) : # Function f\n",
    "    return np.array([y2,y2*(l-2*y1)])\n",
    "\n",
    "def Y(t):    # Exact solution\n",
    "    return np.array([2*np.exp(t)/(2*np.exp(t)-1),-2*np.exp(t)/(4*np.exp(2*t)-4*np.exp(t)+1)])\n",
    "\n",
    "def computeEocs( herr ): \n",
    "    eocs = np.zeros(len(herr)-1)\n",
    "    for i in range(len(eocs)):\n",
    "        eocs [i] = np.log(herr[i+1][1]/herr[i][1])/np.log(herr[i+1][0]/herr[i][0])\n",
    "    return eocs\n",
    "\n",
    "T = 1 # Final Time \n",
    "\n",
    "# Computation of EOCS\n",
    "herr = np.zeros((11,3))\n",
    "for m in range(11):\n",
    "    h = 1/(20*2**m)\n",
    "    y = evolve(forwardEuler, f, Df, 0, Y(0), T, 20*2**m)\n",
    "    herr[m][0] = h\n",
    "    herr[m][1]= np.linalg.norm(y[-1]-Y(1))\n",
    "for i in range(10):\n",
    "   herr[i+1][2]= computeEocs(herr)[i]\n",
    "print('Student ID: 2012149 and 1904805')\n",
    "print('')\n",
    "print('Question 2.1')\n",
    "print('')\n",
    "print('The table below has three columns, one for the time step h, one for the approximation error, and the final \\n column showing the EOCs.')\n",
    "print('')\n",
    "\n",
    "print('       h', '         Error', '       EOCS')\n",
    "npPrint(herr)\n",
    "print('')\n",
    "print('We notice the EOC tends to 1 as h gets smaller, which implies the forward Euler method converges linearly!')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Question 2.2\n",
      "\n",
      "The table below has three columns, one for the time step h, one for the approximation error, and the \n",
      " final column showing the EOCs.\n",
      "\n",
      "       h          Error        EOCS\n",
      "[[5.00000e-02 1.69349e-03 0.00000e+00]\n",
      " [2.50000e-02 4.03231e-04 2.07032e+00]\n",
      " [1.25000e-02 9.84278e-05 2.03447e+00]\n",
      " [6.25000e-03 2.43176e-05 2.01706e+00]\n",
      " [3.12500e-03 6.04373e-06 2.00849e+00]\n",
      " [1.56250e-03 1.50650e-06 2.00423e+00]\n",
      " [7.81250e-04 3.76074e-07 2.00211e+00]\n",
      " [3.90625e-04 9.39497e-08 2.00106e+00]\n",
      " [1.95313e-04 2.34788e-08 2.00053e+00]\n",
      " [9.76563e-05 5.86864e-09 2.00026e+00]\n",
      " [4.88281e-05 1.46703e-09 2.00013e+00]]\n",
      "\n",
      "We notice the EOC tends to 2 as h gets smaller, which implies the Ralston method converges quadratically!\n"
     ]
    }
   ],
   "source": [
    "def Ralston (f,Df,t0,y0, h): \n",
    "    temp = f(t0,y0[0],y0[1])\n",
    "    return y0 + h/4*(temp+3*f(t0+2/3*h,y0[0]+2/3*h*temp[0],y0[1]+2/3*h*temp[1]))\n",
    "\n",
    "# Computation of EOCS\n",
    "herr = np.zeros((11,3))\n",
    "for m in range(11):\n",
    "    h = 1/(20*2**m)\n",
    "    y = evolve(Ralston, f, Df, 0, Y(0), T, 20*2**m)\n",
    "    herr[m][0] = h\n",
    "    herr[m][1]= np.linalg.norm(y[-1]-Y(1))\n",
    "for i in range(10):\n",
    "   herr[i+1][2]= computeEocs(herr)[i]\n",
    "\n",
    "print('Question 2.2')\n",
    "print('')\n",
    "print('The table below has three columns, one for the time step h, one for the approximation error, and the \\n final column showing the EOCs.')\n",
    "print('')\n",
    "\n",
    "print('       h', '         Error', '       EOCS')\n",
    "npPrint(herr)\n",
    "print('')\n",
    "print('We notice the EOC tends to 2 as h gets smaller, which implies the Ralston method converges quadratically!')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Question 2.3\n",
      "\n",
      "With the forward Euler method, the EOCs converge to 1 as h converges to 0, whereas with the Ralston method,\n",
      "the EOCs converge to 2 as h converges to 0. This implies the former converges linearly, but the latter converges\n",
      "quadratically.\n",
      "\n",
      "While the Euler method calls the function f only once, the Ralston method calls it three times.\n",
      "However, with h=1/20, Ralston prdouces an error 21 times smaller, (0.00169 vs 0.03589) and we see\n",
      "that this difference grows exponentially, i.e. at h = 1/(20*2^10) Ralston produces an error 23485 times smaller.\n",
      "This suggests that Ralston is much more efficient and precise!\n"
     ]
    }
   ],
   "source": [
    "print('Question 2.3')\n",
    "print('')\n",
    "print('With the forward Euler method, the EOCs converge to 1 as h converges to 0, whereas with the Ralston method,')\n",
    "print('the EOCs converge to 2 as h converges to 0. This implies the former converges linearly, but the latter converges')\n",
    "print('quadratically.')\n",
    "print('')\n",
    "print('While the Euler method calls the function f only once, the Ralston method calls it three times.')\n",
    "print('However, with h=1/20, Ralston prdouces an error 21 times smaller, (0.00169 vs 0.03589) and we see')\n",
    "print('that this difference grows exponentially, i.e. at h = 1/(20*2^10) Ralston produces an error 23485 times smaller.')\n",
    "print('This suggests that Ralston is much more efficient and precise!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
